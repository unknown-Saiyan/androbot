# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cdp.openapi_client.models.create_payment_transfer_quote201_response import CreatePaymentTransferQuote201Response

class TestCreatePaymentTransferQuote201Response(unittest.TestCase):
    """CreatePaymentTransferQuote201Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreatePaymentTransferQuote201Response:
        """Test CreatePaymentTransferQuote201Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreatePaymentTransferQuote201Response`
        """
        model = CreatePaymentTransferQuote201Response()
        if include_optional:
            return CreatePaymentTransferQuote201Response(
                transfer = {"id":"8e03978e-40d5-43e8-bc93-6894a57f9324","sourceType":"payment_method","source":{"id":"8e03978e-40d5-43e8-bc93-6894a57f9324"},"targetType":"crypto_rail","target":{"currency":"USDC","network":"base","address":"0x742d35Cc6634C0532925a3b844Bc454e4438f44e"},"sourceAmount":"110.50","sourceCurrency":"USD","targetAmount":"100","targetCurrency":"USD","userAmount":"100","userCurrency":"USD","fees":[{"type":"exchange_fee","amount":"10.25","currency":"USD"},{"type":"network_fee","amount":"0.25","currency":"USD"}],"status":"completed","createdAt":"2021-01-01T00:00:00Z","updatedAt":"2021-01-01T00:00:00Z","transactionHash":"0x742d35Cc6634C0532925a3b844Bc454e4438f44e"}
            )
        else:
            return CreatePaymentTransferQuote201Response(
                transfer = {"id":"8e03978e-40d5-43e8-bc93-6894a57f9324","sourceType":"payment_method","source":{"id":"8e03978e-40d5-43e8-bc93-6894a57f9324"},"targetType":"crypto_rail","target":{"currency":"USDC","network":"base","address":"0x742d35Cc6634C0532925a3b844Bc454e4438f44e"},"sourceAmount":"110.50","sourceCurrency":"USD","targetAmount":"100","targetCurrency":"USD","userAmount":"100","userCurrency":"USD","fees":[{"type":"exchange_fee","amount":"10.25","currency":"USD"},{"type":"network_fee","amount":"0.25","currency":"USD"}],"status":"completed","createdAt":"2021-01-01T00:00:00Z","updatedAt":"2021-01-01T00:00:00Z","transactionHash":"0x742d35Cc6634C0532925a3b844Bc454e4438f44e"},
        )
        """

    def testCreatePaymentTransferQuote201Response(self):
        """Test CreatePaymentTransferQuote201Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
