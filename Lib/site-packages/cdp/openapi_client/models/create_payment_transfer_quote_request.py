# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cdp.openapi_client.models.transfer_source import TransferSource
from cdp.openapi_client.models.transfer_target import TransferTarget
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentTransferQuoteRequest(BaseModel):
    """
    CreatePaymentTransferQuoteRequest
    """ # noqa: E501
    source_type: StrictStr = Field(description="The type of the source of the transfer.", alias="sourceType")
    source: TransferSource
    target_type: StrictStr = Field(description="The type of the target of the transfer.", alias="targetType")
    target: TransferTarget
    amount: StrictStr = Field(description="The amount of the transfer, which is either for the source currency to buy, or the target currency to receive.")
    currency: StrictStr = Field(description="The currency of the transfer. This can be specified as the source currency, which would be used to buy, or else the target currency, which is how much will be received.")
    execute: Optional[StrictBool] = Field(default=False, description="Whether to execute the transfer. If true, the transfer will be committed and executed. If false, the quote will be generated and returned.")
    __properties: ClassVar[List[str]] = ["sourceType", "source", "targetType", "target", "amount", "currency", "execute"]

    @field_validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['payment_method']):
            raise ValueError("must be one of enum values ('payment_method')")
        return value

    @field_validator('target_type')
    def target_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['crypto_rail']):
            raise ValueError("must be one of enum values ('crypto_rail')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentTransferQuoteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentTransferQuoteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceType": obj.get("sourceType"),
            "source": TransferSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "targetType": obj.get("targetType"),
            "target": TransferTarget.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "execute": obj.get("execute") if obj.get("execute") is not None else False
        })
        return _obj


