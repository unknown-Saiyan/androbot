# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cdp.openapi_client.models.evm_call import EvmCall
from typing import Optional, Set
from typing_extensions import Self

class EvmUserOperation(BaseModel):
    """
    EvmUserOperation
    """ # noqa: E501
    network: StrictStr = Field(description="The network the user operation is for.")
    user_op_hash: Annotated[str, Field(strict=True)] = Field(description="The hash of the user operation. This is not the transaction hash, as a transaction consists of multiple user operations. The user operation hash is the hash of this particular user operation which gets signed by the owner of the Smart Account.", alias="userOpHash")
    calls: List[EvmCall] = Field(description="The list of calls in the user operation.")
    status: StrictStr = Field(description="The status of the user operation.")
    transaction_hash: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The hash of the transaction that included this particular user operation. This gets set after the user operation is broadcasted and the transaction is included in a block.", alias="transactionHash")
    __properties: ClassVar[List[str]] = ["network", "userOpHash", "calls", "status", "transactionHash"]

    @field_validator('network')
    def network_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['base-sepolia', 'base']):
            raise ValueError("must be one of enum values ('base-sepolia', 'base')")
        return value

    @field_validator('user_op_hash')
    def user_op_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[0-9a-fA-F]{64}$", value):
            raise ValueError(r"must validate the regular expression /^0x[0-9a-fA-F]{64}$/")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'signed', 'broadcast', 'complete', 'dropped', 'failed']):
            raise ValueError("must be one of enum values ('pending', 'signed', 'broadcast', 'complete', 'dropped', 'failed')")
        return value

    @field_validator('transaction_hash')
    def transaction_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^0x[0-9a-fA-F]{64}$|^$", value):
            raise ValueError(r"must validate the regular expression /^0x[0-9a-fA-F]{64}$|^$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvmUserOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in calls (list)
        _items = []
        if self.calls:
            for _item_calls in self.calls:
                if _item_calls:
                    _items.append(_item_calls.to_dict())
            _dict['calls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvmUserOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "network": obj.get("network"),
            "userOpHash": obj.get("userOpHash"),
            "calls": [EvmCall.from_dict(_item) for _item in obj["calls"]] if obj.get("calls") is not None else None,
            "status": obj.get("status"),
            "transactionHash": obj.get("transactionHash")
        })
        return _obj


