# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EIP712Domain(BaseModel):
    """
    The domain of the EIP-712 typed data.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the DApp or protocol.")
    version: Optional[StrictStr] = Field(default=None, description="The version of the DApp or protocol.")
    chain_id: Optional[StrictInt] = Field(default=None, description="The chain ID of the EVM network.", alias="chainId")
    verifying_contract: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The 0x-prefixed EVM address of the verifying smart contract.", alias="verifyingContract")
    salt: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The optional 32-byte 0x-prefixed hex salt for domain separation.")
    __properties: ClassVar[List[str]] = ["name", "version", "chainId", "verifyingContract", "salt"]

    @field_validator('verifying_contract')
    def verifying_contract_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^0x[a-fA-F0-9]{40}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{40}$/")
        return value

    @field_validator('salt')
    def salt_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^0x[a-fA-F0-9]{64}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{64}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EIP712Domain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EIP712Domain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "chainId": obj.get("chainId"),
            "verifyingContract": obj.get("verifyingContract"),
            "salt": obj.get("salt")
        })
        return _obj


