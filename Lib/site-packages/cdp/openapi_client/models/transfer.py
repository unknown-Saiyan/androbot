# coding: utf-8

"""
    Coinbase Developer Platform APIs

    The Coinbase Developer Platform APIs - leading the world's transition onchain.

    The version of the OpenAPI document: 2.0.0
    Contact: cdp@coinbase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cdp.openapi_client.models.fee import Fee
from cdp.openapi_client.models.transfer_source import TransferSource
from cdp.openapi_client.models.transfer_target import TransferTarget
from typing import Optional, Set
from typing_extensions import Self

class Transfer(BaseModel):
    """
    The transfer object.
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)] = Field(description="The ID of the transfer.")
    source_type: StrictStr = Field(description="The type of the source of the transfer.", alias="sourceType")
    source: TransferSource
    target_type: StrictStr = Field(description="The type of the target of the transfer.", alias="targetType")
    target: TransferTarget
    source_amount: StrictStr = Field(description="The amount the source will transfer.", alias="sourceAmount")
    source_currency: StrictStr = Field(description="The currency the source will transfer.", alias="sourceCurrency")
    target_amount: StrictStr = Field(description="The amount the target will receive.", alias="targetAmount")
    target_currency: StrictStr = Field(description="The currency the target will receive.", alias="targetCurrency")
    user_amount: StrictStr = Field(description="The amount the customer put in to transfer.", alias="userAmount")
    user_currency: StrictStr = Field(description="The currency the customer put in to transfer.", alias="userCurrency")
    fees: List[Fee] = Field(description="The fees for the transfer.")
    status: StrictStr = Field(description="The status of the transfer.")
    created_at: StrictStr = Field(description="The UTC date and time in ISO 8601 format the transfer was created.", alias="createdAt")
    updated_at: StrictStr = Field(description="The UTC date and time in ISO 8601 format the transfer was updated.", alias="updatedAt")
    transaction_hash: Optional[StrictStr] = Field(default=None, description="The transaction hash or transaction signature of the transfer.", alias="transactionHash")
    __properties: ClassVar[List[str]] = ["id", "sourceType", "source", "targetType", "target", "sourceAmount", "sourceCurrency", "targetAmount", "targetCurrency", "userAmount", "userCurrency", "fees", "status", "createdAt", "updatedAt", "transactionHash"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/")
        return value

    @field_validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['payment_method']):
            raise ValueError("must be one of enum values ('payment_method')")
        return value

    @field_validator('target_type')
    def target_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['crypto_rail']):
            raise ValueError("must be one of enum values ('crypto_rail')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['created', 'pending', 'started', 'completed', 'failed']):
            raise ValueError("must be one of enum values ('created', 'pending', 'started', 'completed', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item_fees in self.fees:
                if _item_fees:
                    _items.append(_item_fees.to_dict())
            _dict['fees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "sourceType": obj.get("sourceType"),
            "source": TransferSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "targetType": obj.get("targetType"),
            "target": TransferTarget.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "sourceAmount": obj.get("sourceAmount"),
            "sourceCurrency": obj.get("sourceCurrency"),
            "targetAmount": obj.get("targetAmount"),
            "targetCurrency": obj.get("targetCurrency"),
            "userAmount": obj.get("userAmount"),
            "userCurrency": obj.get("userCurrency"),
            "fees": [Fee.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "transactionHash": obj.get("transactionHash")
        })
        return _obj


